{"config":{"indexing":"full","lang":["en","ru"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bankid-asyncio \ud83c\udfe6 \u2693 Badges \ud83c\udff7\ufe0f \u2693 Dependencies \u26d3\ufe0f \u2693 Description \ud83d\udcd6 \u2693 bankid-asyncio - is a BankID client for Python with asyncio support. Asynchronous realization turned out to be implemented due to the fact that the library is written based on HTTPX, which allows not only synchronous requests ( Client ), but also asynchronous ones ( AsyncClient ). Install \ud83d\udcbe \u2693 pip \u2693 pip install bankid-asyncio Poetry \u2693 poetry add bankid-asyncio BankID \u2693 Links \ud83d\udd87\ufe0f \u2693 BankID \u2693 BankID Relying Party Guidelines .pdf \u2693 BankID Best Practices \u2693 BankID Formatting text \u2693 How it works\u2753 \u2693 Success Auth/Sign flow \u2693 Starts on - Desktop or web BankID used on - Mobile device","title":"Main \ud83c\udfe1"},{"location":"#bankid-asyncio","text":"","title":"bankid-asyncio \ud83c\udfe6"},{"location":"#badges","text":"","title":"Badges \ud83c\udff7\ufe0f"},{"location":"#dependencies","text":"","title":"Dependencies \u26d3\ufe0f"},{"location":"#description","text":"bankid-asyncio - is a BankID client for Python with asyncio support. Asynchronous realization turned out to be implemented due to the fact that the library is written based on HTTPX, which allows not only synchronous requests ( Client ), but also asynchronous ones ( AsyncClient ).","title":"Description \ud83d\udcd6"},{"location":"#install","text":"","title":"Install \ud83d\udcbe"},{"location":"#pip","text":"pip install bankid-asyncio","title":"pip"},{"location":"#poetry","text":"poetry add bankid-asyncio","title":"Poetry"},{"location":"#bankid","text":"","title":"BankID"},{"location":"#links","text":"","title":"Links \ud83d\udd87\ufe0f"},{"location":"#bankid_1","text":"","title":"BankID"},{"location":"#bankid-relying-party-guidelines-pdf","text":"","title":"BankID Relying Party Guidelines .pdf"},{"location":"#bankid-best-practices","text":"","title":"BankID Best Practices"},{"location":"#bankid-formatting-text","text":"","title":"BankID Formatting text"},{"location":"#how-it-works","text":"","title":"How it works\u2753"},{"location":"#success-authsign-flow","text":"Starts on - Desktop or web BankID used on - Mobile device","title":"Success Auth/Sign flow"},{"location":"setup/","text":"Setup BankID \ud83d\udd27 \u2693 Prepare test environment \u2693 Test certificates \ud83e\uddfe \u2693 Goto https://www.bankid.com/en/utvecklare/test Click \"Download \u2b07\" You'll get .p12 file To parse key.pem from it, use this command: openssl pkcs12 -in <FILE>.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:<PASSWORD>' Where -in must be a filename and path to .p12 file, password -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:qwerty123' This command will produce key.pem file Tip Usually test password for BankID .p12 file is: qwerty123 To parse cert.pem from it, use this command: openssl pkcs12 -in <FILE>>.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:qwerty123' This command will produce cert.pem file Copy inner certificate and key data to your environment variables or .env file, for example: Example of .env file BANK_ID_HOST = https : // appapi2 . test . bankid . com / rp / v5 . 1 BANK_ID_CERTIFICATE = ' ----- BEGIN CERTIFICATE ----- MIIEyjCCArKgAwIBAgIIMLbIMaRHjMMwDQYJKoZIhvcNAQELBQAwcTELMAkGA1UE BhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRUwEwYDVQQFEwwx MTExMTExMTExMTExLDAqBgNVBAMMI1Rlc3RiYW5rIEEgUlAgQ0EgdjEgZm9yIEJh bmtJRCBUZXN0MB4XDTIyMDgxNzIyMDAwMFoXDTI0MDgxODIxNTk1OVowcjELMAkG A1UEBhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRMwEQYDVQQF Ewo1NTY2MzA0OTI4MRcwFQYDVQQpDA5UZXN0IGF2IEJhbmtJRDEWMBQGA1UEAwwN RlAgVGVzdGNlcnQgNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL4L 8 ERHNSi7Jph9gj4ah7Ieok5lZHZbNyW1AiJJ1OfeD1lbAzxSidtTu6NfC83zxCjL q091lHY5G7dpNDt1rN5Y + jQvrtcLc8nUpgqLfEUnbGKzZaHlO97jh6pqO8nj / mal TrWI70Fr6SO3SxbsgxuwJXlRUAQxI0mPvD1gOd + uymA + EqdYS39ijC2eICHSf7bU wvmscy8TAyEcT4GYmcjai1vbIjlhemmAv + NKJiSpD + zqvuHGIzBm71 / Fd6cTAXqk HkqTlJsxF2m6eojKCfcm5uAvSTXhVbGM155wmpzLskzkQ0dx6LbRNtA + BDe1MsAA v8aE2FQ0j31ALgZePY0CAwEAAaNlMGMwEQYDVR0gBAowCDAGBgQqAwQFMA4GA1Ud DwEB / wQEAwIHgDAfBgNVHSMEGDAWgBTiuVUIvGKgRjldgAxQSpIBy0zvizAdBgNV HQ4EFgQUoiM2SwR2MdMVjaZz04J9LbOEau8wDQYJKoZIhvcNAQELBQADggIBAGBA X1IC7mg1blaeqrTW + TtPkF7GvsbsWIh0RgG9DYRtXXofad3bn6kbDrfFXKZzv4JH ERmJSyLXzMLoiwJB16V8Vz / kHT7AK94ZpLPjedPr2O4U2DGQXu1TwP5nkfgQxTeP K / XnDVHNsMKqTnc + YNX6mj / UyLnbs8eq / a9uHOBJR30e0OPAdlc2fTbBT2Cui29E ctcNH4LrcH4au9vO + RpEUm1hqZy3mHrx1p8Six6 + qJSERNYIWTID8gklyp8MSyG5 q7dk0WcyvytM1dmVf / q + KriljaZ8x2zLhQRz9vpgnfwJ6Qh3cLVoPItVdQ03WpKW WAB1NCMMyNcszkLZ9OO3IRz8iyWV / KWGI07ngVuGa7dHuTje6ZjcObBCr2e4uuU + CLENcretUAv0BtCsOBhQLXZ0qzqrgsVebTRQzm2zTM0yfBpcTtPd3MOMFeMQTHJJ 8 QH6twAKeJfY1lUCTXJYy1ZcrKnrNehksST8tk98Km9t5M2X59QZk7mJzzsUbnWr t + izid7xF7FAgDYj9XJgQHz04a4RjRSw5 / 6 dgexAgvGoeOkG7uUhYd5DEYQCyQyR Zy69pJN32L0nM2dC2e3NFU5BOBwocoKza3hdtSqqvIkj2kzyeU38uaJUco / Vk3OU s + sQNZbk5C1pxkLLwzu815tKg77Om4Nwbi + bgDvI ----- END CERTIFICATE ----- ' BANK_ID_KEY = ' ----- BEGIN PRIVATE KEY ----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC + C / BERzUouyaY fYI + GoeyHqJOZWR2WzcltQIiSdTn3g9ZWwM8UonbU7ujXwvN88Qoy6tPdZR2ORu3 aTQ7dazeWPo0L67XC3PJ1KYKi3xFJ2xis2Wh5Tve44eqajvJ4 / 5 mpU61iO9Ba + kj t0sW7IMbsCV5UVAEMSNJj7w9YDnfrspgPhKnWEt / YowtniAh0n + 21 ML5rHMvEwMh HE + BmJnI2otb2yI5YXppgL / jSiYkqQ / s6r7hxiMwZu9fxXenEwF6pB5Kk5SbMRdp unqIygn3JubgL0k14VWxjNeecJqcy7JM5ENHcei20TbQPgQ3tTLAAL / GhNhUNI99 QC4GXj2NAgMBAAECggEBAKiJH9b9Kxhm9 / BNhZ4bmvEMF7XcVv5bIAnRfwX3YdcK Z6Q / gRwSumyF0iYsmORY5EGldNOvmyxIstqxcn + 0 eMxqLeDv1Gaioll / uowpbNhL AOR64Yt0Jecg8mPfeAwvo6FVwfpdaIgk8YkZ + H5o2lBIosL2qDY / eWK4FCB94HUL Hq7za / 7 J7t5WOYjiOLmb48Fpe7cA1C6ezU / MEwVmDBwZARccCyeQFp96tdzUxb7N ifSaDpUFyxHbb / GNy + hF2ApqFrJ69OBUsHqtYdd36lD / tPF0Lexsvtj / l21D / Nh6 80 mEnpegpJBzO9z7wJkhz / 5 etO3bnaVSUyGGgJl8KkUCgYEA5SnGKyWg3dDtNeEi 5 qilYsTOERvulUJ49zzzva0ioD8sJHNlG1q7Dp9sb9rZW6VOL1W8FUZH63 / 2 sgte NE9njByK2fz9PXXUODu6yREAfDxcv9qkGTLWwZ0LFEQg68G + J1hIz6PQEuhAJqk8 rYHXnTQ0qUw7R6gez2KoXp8wnFMCgYEA1E13E5NKs / VKctUQqXcKpy7VL017yBH8 J2RTjDLVGh6BFcR9wGm5ipE659TpNKdqPN17bGPGj5MOdZL1 + sGVTRkg4vSZeZuE kpw192KgwNoDznjeVH5qY7VM8Zy2DI91mg2NQTQiMF0mRLaenMOfzFBjHwQZ2J / J ecT3Vwepgp8CgYAsocIyzRVTnklU4RBHFDmBzwrDUklZUKT2oixmmL3Rr / wM7VyX w0gDRRF9h4Ylz0A2 / 9 + t1Q5U04tcidJDJePo6fYxFpDL05MNkLSETIdnqun1g8PK FJi3BLsPq2UuBYHfb9Zeem0gAZPc88EZmdxAhdZr0qkI / 7 lgcrqQEzkIeQKBgGri kVfOqSaPEStdL + VR5JAlGPmWtgIVY / DlJtcH5Jgg0XaHFZSg5ePomFKNs9dpjigU jgYU + avhKr9w / NyBR8yoIRGCeh5qeMVjVhw1kJ9nY9E4sx6xApkudw2Ri2opc9ja h8pTF / 9 ndlPT6WkdaD9yHWVJKEYStFnVG326gtIbAoGAetLNOSZBSW03SJlI7dhY 4 hycNElfSd0t89Bf4YcYbWrpySeKCG0oTO7Y56ZS9RmgNEyz4HNXZcQ56inMNY6Z M + o1wGEKJKLBtCJHZp7Sh8zy / RMI3naF4vc4r4BpK9k5ZAEL8gHVm9M5C2ZG8whc r + Uu / g0P3m8w7INgsjxQy / U = ----- END PRIVATE KEY ----- ' Test account \ud83d\udcbc \u2693 Here is a guide: Get BankID for test Issue personal code \u2693 Tip Use this method when you set up your environment for the first time. Otherwise, use this methods mobile or desktop . Goto https://demo.bankid.com/ordercode Fill form with your data (organization, email, project, fist name, last name) Organization email Email should be a corporate, emails with @gmail . com domain wouldn't work\u2757 Goto your corporate email, you'll obtain a test 30-days trial code. Login with personal code \u2693 Use this code to log in https://demo.bankid.com/logincode It's all, now you'll be able to set up Mobile / Desktop BankID environments. Login with mobile app \u2693 This is method to log in to test account using mobile app and QR code. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Open your BankID test app and scan QR code. Warning Mobile app should be configured, read here Mobile test environments . Login with desktop app \u2693 This is method to log in to test account using desktop app. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Click \"Alternative: Start BankID Security Application on this device.\". Warning Mobile app should be configured, read here Mobile test environments . Mobile test environments \u2693 Test Android app \ud83d\udcf1 \u2693 Here is a guide: BankID test configuration Install BankID app from your app store. Enable \"airplane mode\". Open BankID app (you'll be notified that is no connection, click \"OK\"). 3.1 Click \"\u2699 Settings\". 3.2 Click \"About BankID\". 3.3 Make a \"long press\" on the heading Error information in the input dialog enter kundtest and save. Note If everything is \"OK\", it appears CUST after the Version. Exit app, and also close it from background. Disable \"airplane mode\". Done. Test iOS app \ud83d\udcf1 \u2693 Uninstall any existing version of BankID Security App and then reinstall it from App Store. In Settings \u2192 BankID \u2192 Developer \u2192 Server, enter cavainternal.test.bankid.com . Done, BankID Security App will connect to the test server . Note Please note that the app must be uninstalled/reinstalled to be restored for the production environment. TODO Screenshots If you have an iPhone you can help to document it with screenshots (Contributors welcome). Desktop test environments \u2693 Test Windows app \ud83d\udda5 \u2693 Download windows BankID desktop application ( extra link ) Install it. Run & close application. Go to this path: C:\\Users\\ USER_NAME \\AppData\\Roaming\\BankID\\Config where USER_NAME - your Window's user. Create file with name CavaServerSelector.txt Write kundtest inside file and save it. Open application, navigate to: \"File\" \u2192 \"Preferences\" \u2192 \"Info for support\" \u2192 \"Check connections\" \u2192 click \"Check\". You should get: BankID server: OK Update server: OK Done. Test MacOS app \ud83d\udcbb \u2693 TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome). Generate personal number (customizable) \u2693 Goto Personal number generator Select \"Output format\" as \"YYYYMMDDNNNN\". Select your gender. Fill out \"Date of birth\". Example Generate random personal number with (fejk.se) \u2693 Generate personal number at: https://fejk.se/ Get date of birth (without dashes). Get latest 4 digits of personnummer. Concatenate it without dashes. Example 1) Date of birth 1996 - 10 - 21 \u2192 19961021 (remove dashes) 2) End of personal number -1238 \u2192 1238 (removed dash) 3) Result 19961021 + 1238 \u2192 199610211238 (must be 12 digits length) Issue BankID for test \u2693 Login to Demo Bank. Tip First time login: personal code . Subsequent time login: mobile , desktop . Click selected button under \"Issue BankID for Test\". Tip \" Mobile BankID \" - for mobile \ud83d\udcf1; \" BankID on file \" - for desktop \ud83d\udda5; Fill data into fields (first name, last name, personal number). Tip You can use random first name and last name. Click \"Issue\" and proceed with connection section, depends on your choice (mobile or desktop). Connect with Android \ud83d\udcf1 \u2693 Before start: requirements Click \"Issue\" under \"Mobile BankID\" form. It will open modal window with QR code. Open BankID app. Click \"New BankID\". It will open scanner, scan QR code inside modal window. Success screen at mobile: Success screen at modal: You can enable fingerprint to easy approve BankID confirmation. You can check new test BankID connection inside your \"Settings\" under the BankID tab. Note P.S. Also your main screen now will have \"QR code\" button instead of \"New BankID\" Connect with iOS \ud83d\udcf1 \u2693 Warning If you have an iPhone you can help to document it with screenshots (Contributors welcome). Connect with Windows \ud83d\udda5 \u2693 Before start: requirements Click \"Issue\" under \"BankID on file\" form. Click \"Open BankID issuing\". It will open modal window with QR code. Click \"I have the most recent BankID application, proceed without installation >\" Click \"Continue >\". Click \"Start\" inside Start the program modal. You will be prompted to set password. It should be secure enough. Close the modal or click \"Close\" button. Inside BankID Secure Application you'll get new record about BankID connection. Done. Now you can test login with BankID at Windows Desktop. Connect with MacOS \ud83d\udcbb \u2693 TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome).","title":"Setup BankID \ud83d\udd27"},{"location":"setup/#setup-bankid","text":"","title":"Setup BankID \ud83d\udd27"},{"location":"setup/#prepare-test-environment","text":"","title":"Prepare test environment"},{"location":"setup/#test-certificates","text":"Goto https://www.bankid.com/en/utvecklare/test Click \"Download \u2b07\" You'll get .p12 file To parse key.pem from it, use this command: openssl pkcs12 -in <FILE>.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:<PASSWORD>' Where -in must be a filename and path to .p12 file, password -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:qwerty123' This command will produce key.pem file Tip Usually test password for BankID .p12 file is: qwerty123 To parse cert.pem from it, use this command: openssl pkcs12 -in <FILE>>.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:qwerty123' This command will produce cert.pem file Copy inner certificate and key data to your environment variables or .env file, for example: Example of .env file BANK_ID_HOST = https : // appapi2 . test . bankid . com / rp / v5 . 1 BANK_ID_CERTIFICATE = ' ----- BEGIN CERTIFICATE ----- MIIEyjCCArKgAwIBAgIIMLbIMaRHjMMwDQYJKoZIhvcNAQELBQAwcTELMAkGA1UE BhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRUwEwYDVQQFEwwx MTExMTExMTExMTExLDAqBgNVBAMMI1Rlc3RiYW5rIEEgUlAgQ0EgdjEgZm9yIEJh bmtJRCBUZXN0MB4XDTIyMDgxNzIyMDAwMFoXDTI0MDgxODIxNTk1OVowcjELMAkG A1UEBhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRMwEQYDVQQF Ewo1NTY2MzA0OTI4MRcwFQYDVQQpDA5UZXN0IGF2IEJhbmtJRDEWMBQGA1UEAwwN RlAgVGVzdGNlcnQgNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL4L 8 ERHNSi7Jph9gj4ah7Ieok5lZHZbNyW1AiJJ1OfeD1lbAzxSidtTu6NfC83zxCjL q091lHY5G7dpNDt1rN5Y + jQvrtcLc8nUpgqLfEUnbGKzZaHlO97jh6pqO8nj / mal TrWI70Fr6SO3SxbsgxuwJXlRUAQxI0mPvD1gOd + uymA + EqdYS39ijC2eICHSf7bU wvmscy8TAyEcT4GYmcjai1vbIjlhemmAv + NKJiSpD + zqvuHGIzBm71 / Fd6cTAXqk HkqTlJsxF2m6eojKCfcm5uAvSTXhVbGM155wmpzLskzkQ0dx6LbRNtA + BDe1MsAA v8aE2FQ0j31ALgZePY0CAwEAAaNlMGMwEQYDVR0gBAowCDAGBgQqAwQFMA4GA1Ud DwEB / wQEAwIHgDAfBgNVHSMEGDAWgBTiuVUIvGKgRjldgAxQSpIBy0zvizAdBgNV HQ4EFgQUoiM2SwR2MdMVjaZz04J9LbOEau8wDQYJKoZIhvcNAQELBQADggIBAGBA X1IC7mg1blaeqrTW + TtPkF7GvsbsWIh0RgG9DYRtXXofad3bn6kbDrfFXKZzv4JH ERmJSyLXzMLoiwJB16V8Vz / kHT7AK94ZpLPjedPr2O4U2DGQXu1TwP5nkfgQxTeP K / XnDVHNsMKqTnc + YNX6mj / UyLnbs8eq / a9uHOBJR30e0OPAdlc2fTbBT2Cui29E ctcNH4LrcH4au9vO + RpEUm1hqZy3mHrx1p8Six6 + qJSERNYIWTID8gklyp8MSyG5 q7dk0WcyvytM1dmVf / q + KriljaZ8x2zLhQRz9vpgnfwJ6Qh3cLVoPItVdQ03WpKW WAB1NCMMyNcszkLZ9OO3IRz8iyWV / KWGI07ngVuGa7dHuTje6ZjcObBCr2e4uuU + CLENcretUAv0BtCsOBhQLXZ0qzqrgsVebTRQzm2zTM0yfBpcTtPd3MOMFeMQTHJJ 8 QH6twAKeJfY1lUCTXJYy1ZcrKnrNehksST8tk98Km9t5M2X59QZk7mJzzsUbnWr t + izid7xF7FAgDYj9XJgQHz04a4RjRSw5 / 6 dgexAgvGoeOkG7uUhYd5DEYQCyQyR Zy69pJN32L0nM2dC2e3NFU5BOBwocoKza3hdtSqqvIkj2kzyeU38uaJUco / Vk3OU s + sQNZbk5C1pxkLLwzu815tKg77Om4Nwbi + bgDvI ----- END CERTIFICATE ----- ' BANK_ID_KEY = ' ----- BEGIN PRIVATE KEY ----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC + C / BERzUouyaY fYI + GoeyHqJOZWR2WzcltQIiSdTn3g9ZWwM8UonbU7ujXwvN88Qoy6tPdZR2ORu3 aTQ7dazeWPo0L67XC3PJ1KYKi3xFJ2xis2Wh5Tve44eqajvJ4 / 5 mpU61iO9Ba + kj t0sW7IMbsCV5UVAEMSNJj7w9YDnfrspgPhKnWEt / YowtniAh0n + 21 ML5rHMvEwMh HE + BmJnI2otb2yI5YXppgL / jSiYkqQ / s6r7hxiMwZu9fxXenEwF6pB5Kk5SbMRdp unqIygn3JubgL0k14VWxjNeecJqcy7JM5ENHcei20TbQPgQ3tTLAAL / GhNhUNI99 QC4GXj2NAgMBAAECggEBAKiJH9b9Kxhm9 / BNhZ4bmvEMF7XcVv5bIAnRfwX3YdcK Z6Q / gRwSumyF0iYsmORY5EGldNOvmyxIstqxcn + 0 eMxqLeDv1Gaioll / uowpbNhL AOR64Yt0Jecg8mPfeAwvo6FVwfpdaIgk8YkZ + H5o2lBIosL2qDY / eWK4FCB94HUL Hq7za / 7 J7t5WOYjiOLmb48Fpe7cA1C6ezU / MEwVmDBwZARccCyeQFp96tdzUxb7N ifSaDpUFyxHbb / GNy + hF2ApqFrJ69OBUsHqtYdd36lD / tPF0Lexsvtj / l21D / Nh6 80 mEnpegpJBzO9z7wJkhz / 5 etO3bnaVSUyGGgJl8KkUCgYEA5SnGKyWg3dDtNeEi 5 qilYsTOERvulUJ49zzzva0ioD8sJHNlG1q7Dp9sb9rZW6VOL1W8FUZH63 / 2 sgte NE9njByK2fz9PXXUODu6yREAfDxcv9qkGTLWwZ0LFEQg68G + J1hIz6PQEuhAJqk8 rYHXnTQ0qUw7R6gez2KoXp8wnFMCgYEA1E13E5NKs / VKctUQqXcKpy7VL017yBH8 J2RTjDLVGh6BFcR9wGm5ipE659TpNKdqPN17bGPGj5MOdZL1 + sGVTRkg4vSZeZuE kpw192KgwNoDznjeVH5qY7VM8Zy2DI91mg2NQTQiMF0mRLaenMOfzFBjHwQZ2J / J ecT3Vwepgp8CgYAsocIyzRVTnklU4RBHFDmBzwrDUklZUKT2oixmmL3Rr / wM7VyX w0gDRRF9h4Ylz0A2 / 9 + t1Q5U04tcidJDJePo6fYxFpDL05MNkLSETIdnqun1g8PK FJi3BLsPq2UuBYHfb9Zeem0gAZPc88EZmdxAhdZr0qkI / 7 lgcrqQEzkIeQKBgGri kVfOqSaPEStdL + VR5JAlGPmWtgIVY / DlJtcH5Jgg0XaHFZSg5ePomFKNs9dpjigU jgYU + avhKr9w / NyBR8yoIRGCeh5qeMVjVhw1kJ9nY9E4sx6xApkudw2Ri2opc9ja h8pTF / 9 ndlPT6WkdaD9yHWVJKEYStFnVG326gtIbAoGAetLNOSZBSW03SJlI7dhY 4 hycNElfSd0t89Bf4YcYbWrpySeKCG0oTO7Y56ZS9RmgNEyz4HNXZcQ56inMNY6Z M + o1wGEKJKLBtCJHZp7Sh8zy / RMI3naF4vc4r4BpK9k5ZAEL8gHVm9M5C2ZG8whc r + Uu / g0P3m8w7INgsjxQy / U = ----- END PRIVATE KEY ----- '","title":"Test certificates \ud83e\uddfe"},{"location":"setup/#test-account","text":"Here is a guide: Get BankID for test","title":"Test account \ud83d\udcbc"},{"location":"setup/#issue-personal-code","text":"Tip Use this method when you set up your environment for the first time. Otherwise, use this methods mobile or desktop . Goto https://demo.bankid.com/ordercode Fill form with your data (organization, email, project, fist name, last name) Organization email Email should be a corporate, emails with @gmail . com domain wouldn't work\u2757 Goto your corporate email, you'll obtain a test 30-days trial code.","title":"Issue personal code"},{"location":"setup/#login-with-personal-code","text":"Use this code to log in https://demo.bankid.com/logincode It's all, now you'll be able to set up Mobile / Desktop BankID environments.","title":"Login with personal code"},{"location":"setup/#login-with-mobile-app","text":"This is method to log in to test account using mobile app and QR code. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Open your BankID test app and scan QR code. Warning Mobile app should be configured, read here Mobile test environments .","title":"Login with mobile app"},{"location":"setup/#login-with-desktop-app","text":"This is method to log in to test account using desktop app. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Click \"Alternative: Start BankID Security Application on this device.\". Warning Mobile app should be configured, read here Mobile test environments .","title":"Login with desktop app"},{"location":"setup/#mobile-test-environments","text":"","title":"Mobile test environments"},{"location":"setup/#test-android-app","text":"Here is a guide: BankID test configuration Install BankID app from your app store. Enable \"airplane mode\". Open BankID app (you'll be notified that is no connection, click \"OK\"). 3.1 Click \"\u2699 Settings\". 3.2 Click \"About BankID\". 3.3 Make a \"long press\" on the heading Error information in the input dialog enter kundtest and save. Note If everything is \"OK\", it appears CUST after the Version. Exit app, and also close it from background. Disable \"airplane mode\". Done.","title":"Test Android app \ud83d\udcf1"},{"location":"setup/#test-ios-app","text":"Uninstall any existing version of BankID Security App and then reinstall it from App Store. In Settings \u2192 BankID \u2192 Developer \u2192 Server, enter cavainternal.test.bankid.com . Done, BankID Security App will connect to the test server . Note Please note that the app must be uninstalled/reinstalled to be restored for the production environment. TODO Screenshots If you have an iPhone you can help to document it with screenshots (Contributors welcome).","title":"Test iOS app \ud83d\udcf1"},{"location":"setup/#desktop-test-environments","text":"","title":"Desktop test environments"},{"location":"setup/#test-windows-app","text":"Download windows BankID desktop application ( extra link ) Install it. Run & close application. Go to this path: C:\\Users\\ USER_NAME \\AppData\\Roaming\\BankID\\Config where USER_NAME - your Window's user. Create file with name CavaServerSelector.txt Write kundtest inside file and save it. Open application, navigate to: \"File\" \u2192 \"Preferences\" \u2192 \"Info for support\" \u2192 \"Check connections\" \u2192 click \"Check\". You should get: BankID server: OK Update server: OK Done.","title":"Test Windows app \ud83d\udda5"},{"location":"setup/#test-macos-app","text":"TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome).","title":"Test MacOS app \ud83d\udcbb"},{"location":"setup/#generate-personal-number-customizable","text":"Goto Personal number generator Select \"Output format\" as \"YYYYMMDDNNNN\". Select your gender. Fill out \"Date of birth\". Example","title":"Generate personal number (customizable)"},{"location":"setup/#generate-random-personal-number-with-fejkse","text":"Generate personal number at: https://fejk.se/ Get date of birth (without dashes). Get latest 4 digits of personnummer. Concatenate it without dashes. Example 1) Date of birth 1996 - 10 - 21 \u2192 19961021 (remove dashes) 2) End of personal number -1238 \u2192 1238 (removed dash) 3) Result 19961021 + 1238 \u2192 199610211238 (must be 12 digits length)","title":"Generate random personal number with (fejk.se)"},{"location":"setup/#issue-bankid-for-test","text":"Login to Demo Bank. Tip First time login: personal code . Subsequent time login: mobile , desktop . Click selected button under \"Issue BankID for Test\". Tip \" Mobile BankID \" - for mobile \ud83d\udcf1; \" BankID on file \" - for desktop \ud83d\udda5; Fill data into fields (first name, last name, personal number). Tip You can use random first name and last name. Click \"Issue\" and proceed with connection section, depends on your choice (mobile or desktop).","title":"Issue BankID for test"},{"location":"setup/#connect-with-android","text":"Before start: requirements Click \"Issue\" under \"Mobile BankID\" form. It will open modal window with QR code. Open BankID app. Click \"New BankID\". It will open scanner, scan QR code inside modal window. Success screen at mobile: Success screen at modal: You can enable fingerprint to easy approve BankID confirmation. You can check new test BankID connection inside your \"Settings\" under the BankID tab. Note P.S. Also your main screen now will have \"QR code\" button instead of \"New BankID\"","title":"Connect with Android \ud83d\udcf1"},{"location":"setup/#connect-with-ios","text":"Warning If you have an iPhone you can help to document it with screenshots (Contributors welcome).","title":"Connect with iOS \ud83d\udcf1"},{"location":"setup/#connect-with-windows","text":"Before start: requirements Click \"Issue\" under \"BankID on file\" form. Click \"Open BankID issuing\". It will open modal window with QR code. Click \"I have the most recent BankID application, proceed without installation >\" Click \"Continue >\". Click \"Start\" inside Start the program modal. You will be prompted to set password. It should be secure enough. Close the modal or click \"Close\" button. Inside BankID Secure Application you'll get new record about BankID connection. Done. Now you can test login with BankID at Windows Desktop.","title":"Connect with Windows \ud83d\udda5"},{"location":"setup/#connect-with-macos","text":"TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome).","title":"Connect with MacOS \ud83d\udcbb"},{"location":"usage/","text":"Usage \ud83d\udd0c \u2693 Settings Management \u2693 With Pydantic \u2693 Pydantic provides a convenient interface for managing settings and reading them from environment variables or .env . Pydantic settings management: Documentation Here is an example how you can manage your BankID environments: settings.py import functools from pydantic import BaseSettings , Field __all__ = [ \"BankIDSettings\" ] class _BankIDSettings ( BaseSettings ): BANK_ID_CERTIFICATE : str BANK_ID_HOST : str = Field ( default = \"https://appapi2.test.bankid.com/rp/v5.1\" ) BANK_ID_KEY : str class Config : env_file = \".env\" env_file_encoding = \"UTF-8\" @functools . lru_cache () def get_bank_id_settings () -> _BankIDSettings : return _BankIDSettings () BankIDSettings : _BankIDSettings = get_bank_id_settings () With Dynaconf \u2693 Another good option to manage your settings and environments. https://www.dynaconf.com/ BankID Factory \ud83c\udfe6\ud83c\udfed \u2693 To initialize BankID you should use BankIDFactory class and then use make_client method to retrieve necessary client. from settings import BankIDSettings from bankid_asyncio import BankIDFactory bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) Clients \u2693 Key differences \u2693 With Pydantic \u2693 Clients with Pydantic require schema kwarg only attribute to all methods. It also returns BaseModel based results from all methods (all Pydantic features included). It helps to easily transform results to complex structures written by schemas, that you can access with . dot notation, like class attributes, transform to dict with aliases and python snake case attribute names. Asynchronous \u2693 Clients with asyncio support, based on httpx.AsyncClient . Synchronous \u2693 Clients, that based on httpx.Client . Async with Pydantic (preferable) \u2693 Why this one preferable? Because clients with Pydantic have extra validations (realization via BaseModel schema classes). It should prevent errors at develop & testing stages. To use asynchronous BankID client with Pydantic use asynchronous = True together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDAsyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncPydanticClient = bank_id_factory . make_client ( asynchronous = True , pydantic = True ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response : AuthResponseSchema = await bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) TODO Make demo (example purposes) repository with FastAPI based back-end using this client. Warning async methods (coroutines) should be run from async code. Async without Pydantic \u2693 To use asynchronous BankID client without Pydantic use asynchronous = True together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDAsyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncClient = bank_id_factory . make_client ( asynchronous = True , pydantic = False ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response = await bank_id_client . auth ( user_ip = \"127.0.0.1\" ) Warning async methods (coroutines) should be run from async code. Sync with Pydantic \u2693 To use synchronous BankID client with Pydantic use asynchronous = False together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDSyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncPydanticClient = bank_id_factory . make_client ( asynchronous = False , pydantic = True ) auth_response : AuthResponseSchema = bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) # Possible usage of responses print ( auth_response . order_ref , auth_response . auto_start_token , auth_response . qr_start_token , auth_response . qr_start_secret , ) print ( auth_response . dict (), auth_response . json ()) print ( auth_response . dict ( by_alias = True ), auth_response . json ( by_alias = True )) Example output 66d2323a-40a0-49e2-822d-f95f2fdc1c58 556080cd-aa51-4c37-82e8-f34d6dcebf4b 36d7f12b-52f5-44c4-9514-2a5d3d2b22d8 33b73952-f2dd-4c99-a727-c7ae77bdc834 { 'order_ref' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'auto_start_token' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qr_start_token' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qr_start_secret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"order_ref\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"auto_start_token\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qr_start_token\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qr_start_secret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" } { 'orderRef' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'autoStartToken' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qrStartToken' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qrStartSecret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"orderRef\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"autoStartToken\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qrStartToken\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qrStartSecret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" } Sync without Pydantic \u2693 To use synchronous BankID client without Pydantic use asynchronous = False together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDSyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncClient = bank_id_factory . make_client ( asynchronous = False , pydantic = False ) auth_response = bank_id_client . auth ( user_ip = \"127.0.0.1\" ) # Results from clients is simple python's dict print ( auth_response ) Example output { 'orderRef' : 'f7508caf-5e3c-40ed-b8a0-b47e3b82819f' , 'autoStartToken' : '45dd8454-9b43-4b3d-bbe8-ced64056d415' , 'qrStartToken' : '19f814b1-a198-4328-be1f-83a02f46890a' , 'qrStartSecret' : '663fee80-0a25-40a3-8d1b-a5c4046c01f1' }","title":"Usage \ud83d\udd0c"},{"location":"usage/#usage","text":"","title":"Usage \ud83d\udd0c"},{"location":"usage/#settings-management","text":"","title":"Settings Management"},{"location":"usage/#with-pydantic","text":"Pydantic provides a convenient interface for managing settings and reading them from environment variables or .env . Pydantic settings management: Documentation Here is an example how you can manage your BankID environments: settings.py import functools from pydantic import BaseSettings , Field __all__ = [ \"BankIDSettings\" ] class _BankIDSettings ( BaseSettings ): BANK_ID_CERTIFICATE : str BANK_ID_HOST : str = Field ( default = \"https://appapi2.test.bankid.com/rp/v5.1\" ) BANK_ID_KEY : str class Config : env_file = \".env\" env_file_encoding = \"UTF-8\" @functools . lru_cache () def get_bank_id_settings () -> _BankIDSettings : return _BankIDSettings () BankIDSettings : _BankIDSettings = get_bank_id_settings ()","title":"With Pydantic"},{"location":"usage/#with-dynaconf","text":"Another good option to manage your settings and environments. https://www.dynaconf.com/","title":"With Dynaconf"},{"location":"usage/#bankid-factory","text":"To initialize BankID you should use BankIDFactory class and then use make_client method to retrieve necessary client. from settings import BankIDSettings from bankid_asyncio import BankIDFactory bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , )","title":"BankID Factory \ud83c\udfe6\ud83c\udfed"},{"location":"usage/#clients","text":"","title":"Clients"},{"location":"usage/#key-differences","text":"","title":"Key differences"},{"location":"usage/#with-pydantic_1","text":"Clients with Pydantic require schema kwarg only attribute to all methods. It also returns BaseModel based results from all methods (all Pydantic features included). It helps to easily transform results to complex structures written by schemas, that you can access with . dot notation, like class attributes, transform to dict with aliases and python snake case attribute names.","title":"With Pydantic"},{"location":"usage/#asynchronous","text":"Clients with asyncio support, based on httpx.AsyncClient .","title":"Asynchronous"},{"location":"usage/#synchronous","text":"Clients, that based on httpx.Client .","title":"Synchronous"},{"location":"usage/#async-with-pydantic-preferable","text":"Why this one preferable? Because clients with Pydantic have extra validations (realization via BaseModel schema classes). It should prevent errors at develop & testing stages. To use asynchronous BankID client with Pydantic use asynchronous = True together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDAsyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncPydanticClient = bank_id_factory . make_client ( asynchronous = True , pydantic = True ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response : AuthResponseSchema = await bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) TODO Make demo (example purposes) repository with FastAPI based back-end using this client. Warning async methods (coroutines) should be run from async code.","title":"Async with Pydantic (preferable)"},{"location":"usage/#async-without-pydantic","text":"To use asynchronous BankID client without Pydantic use asynchronous = True together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDAsyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncClient = bank_id_factory . make_client ( asynchronous = True , pydantic = False ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response = await bank_id_client . auth ( user_ip = \"127.0.0.1\" ) Warning async methods (coroutines) should be run from async code.","title":"Async without Pydantic"},{"location":"usage/#sync-with-pydantic","text":"To use synchronous BankID client with Pydantic use asynchronous = False together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDSyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncPydanticClient = bank_id_factory . make_client ( asynchronous = False , pydantic = True ) auth_response : AuthResponseSchema = bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) # Possible usage of responses print ( auth_response . order_ref , auth_response . auto_start_token , auth_response . qr_start_token , auth_response . qr_start_secret , ) print ( auth_response . dict (), auth_response . json ()) print ( auth_response . dict ( by_alias = True ), auth_response . json ( by_alias = True )) Example output 66d2323a-40a0-49e2-822d-f95f2fdc1c58 556080cd-aa51-4c37-82e8-f34d6dcebf4b 36d7f12b-52f5-44c4-9514-2a5d3d2b22d8 33b73952-f2dd-4c99-a727-c7ae77bdc834 { 'order_ref' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'auto_start_token' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qr_start_token' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qr_start_secret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"order_ref\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"auto_start_token\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qr_start_token\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qr_start_secret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" } { 'orderRef' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'autoStartToken' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qrStartToken' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qrStartSecret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"orderRef\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"autoStartToken\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qrStartToken\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qrStartSecret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" }","title":"Sync with Pydantic"},{"location":"usage/#sync-without-pydantic","text":"To use synchronous BankID client without Pydantic use asynchronous = False together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDSyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncClient = bank_id_factory . make_client ( asynchronous = False , pydantic = False ) auth_response = bank_id_client . auth ( user_ip = \"127.0.0.1\" ) # Results from clients is simple python's dict print ( auth_response ) Example output { 'orderRef' : 'f7508caf-5e3c-40ed-b8a0-b47e3b82819f' , 'autoStartToken' : '45dd8454-9b43-4b3d-bbe8-ced64056d415' , 'qrStartToken' : '19f814b1-a198-4328-be1f-83a02f46890a' , 'qrStartSecret' : '663fee80-0a25-40a3-8d1b-a5c4046c01f1' }","title":"Sync without Pydantic"},{"location":"common/abbreviations/","text":"","title":"Abbreviations"},{"location":"includes/badges/","text":"Badges \ud83c\udff7\ufe0f \u2693","title":"Badges"},{"location":"includes/badges/#badges","text":"","title":"Badges \ud83c\udff7\ufe0f"},{"location":"uk/","text":"bankid-asyncio \ud83c\udfe6 \u2693 Badges \ud83c\udff7\ufe0f \u2693 Dependencies \u26d3\ufe0f \u2693 Description \ud83d\udcd6 \u2693 bankid-asyncio - is a BankID client for Python with asyncio support. Asynchronous realization turned out to be implemented due to the fact that the library is written based on HTTPX, which allows not only synchronous requests ( Client ), but also asynchronous ones ( AsyncClient ). Install \ud83d\udcbe \u2693 pip \u2693 pip install bankid-asyncio Poetry \u2693 poetry add bankid-asyncio BankID \u2693 Links \ud83d\udd87\ufe0f \u2693 BankID \u2693 BankID Relying Party Guidelines .pdf \u2693 BankID Best Practices \u2693 BankID Formatting text \u2693 How it works\u2753 \u2693 Success Auth/Sign flow \u2693 Starts on - Desktop or web BankID used on - Mobile device","title":"Main \ud83c\udfe1"},{"location":"uk/#bankid-asyncio","text":"","title":"bankid-asyncio \ud83c\udfe6"},{"location":"uk/#badges","text":"","title":"Badges \ud83c\udff7\ufe0f"},{"location":"uk/#dependencies","text":"","title":"Dependencies \u26d3\ufe0f"},{"location":"uk/#description","text":"bankid-asyncio - is a BankID client for Python with asyncio support. Asynchronous realization turned out to be implemented due to the fact that the library is written based on HTTPX, which allows not only synchronous requests ( Client ), but also asynchronous ones ( AsyncClient ).","title":"Description \ud83d\udcd6"},{"location":"uk/#install","text":"","title":"Install \ud83d\udcbe"},{"location":"uk/#pip","text":"pip install bankid-asyncio","title":"pip"},{"location":"uk/#poetry","text":"poetry add bankid-asyncio","title":"Poetry"},{"location":"uk/#bankid","text":"","title":"BankID"},{"location":"uk/#links","text":"","title":"Links \ud83d\udd87\ufe0f"},{"location":"uk/#bankid_1","text":"","title":"BankID"},{"location":"uk/#bankid-relying-party-guidelines-pdf","text":"","title":"BankID Relying Party Guidelines .pdf"},{"location":"uk/#bankid-best-practices","text":"","title":"BankID Best Practices"},{"location":"uk/#bankid-formatting-text","text":"","title":"BankID Formatting text"},{"location":"uk/#how-it-works","text":"","title":"How it works\u2753"},{"location":"uk/#success-authsign-flow","text":"Starts on - Desktop or web BankID used on - Mobile device","title":"Success Auth/Sign flow"},{"location":"uk/setup/","text":"Setup BankID \ud83d\udd27 \u2693 Prepare test environment \u2693 Test certificates \ud83e\uddfe \u2693 Goto https://www.bankid.com/en/utvecklare/test Click \"Download \u2b07\" You'll get .p12 file To parse key.pem from it, use this command: openssl pkcs12 -in <FILE>.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:<PASSWORD>' Where -in must be a filename and path to .p12 file, password -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:qwerty123' This command will produce key.pem file Tip Usually test password for BankID .p12 file is: qwerty123 To parse cert.pem from it, use this command: openssl pkcs12 -in <FILE>>.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:qwerty123' This command will produce cert.pem file Copy inner certificate and key data to your environment variables or .env file, for example: Example of .env file BANK_ID_HOST = https : // appapi2 . test . bankid . com / rp / v5 . 1 BANK_ID_CERTIFICATE = ' ----- BEGIN CERTIFICATE ----- MIIEyjCCArKgAwIBAgIIMLbIMaRHjMMwDQYJKoZIhvcNAQELBQAwcTELMAkGA1UE BhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRUwEwYDVQQFEwwx MTExMTExMTExMTExLDAqBgNVBAMMI1Rlc3RiYW5rIEEgUlAgQ0EgdjEgZm9yIEJh bmtJRCBUZXN0MB4XDTIyMDgxNzIyMDAwMFoXDTI0MDgxODIxNTk1OVowcjELMAkG A1UEBhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRMwEQYDVQQF Ewo1NTY2MzA0OTI4MRcwFQYDVQQpDA5UZXN0IGF2IEJhbmtJRDEWMBQGA1UEAwwN RlAgVGVzdGNlcnQgNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL4L 8 ERHNSi7Jph9gj4ah7Ieok5lZHZbNyW1AiJJ1OfeD1lbAzxSidtTu6NfC83zxCjL q091lHY5G7dpNDt1rN5Y + jQvrtcLc8nUpgqLfEUnbGKzZaHlO97jh6pqO8nj / mal TrWI70Fr6SO3SxbsgxuwJXlRUAQxI0mPvD1gOd + uymA + EqdYS39ijC2eICHSf7bU wvmscy8TAyEcT4GYmcjai1vbIjlhemmAv + NKJiSpD + zqvuHGIzBm71 / Fd6cTAXqk HkqTlJsxF2m6eojKCfcm5uAvSTXhVbGM155wmpzLskzkQ0dx6LbRNtA + BDe1MsAA v8aE2FQ0j31ALgZePY0CAwEAAaNlMGMwEQYDVR0gBAowCDAGBgQqAwQFMA4GA1Ud DwEB / wQEAwIHgDAfBgNVHSMEGDAWgBTiuVUIvGKgRjldgAxQSpIBy0zvizAdBgNV HQ4EFgQUoiM2SwR2MdMVjaZz04J9LbOEau8wDQYJKoZIhvcNAQELBQADggIBAGBA X1IC7mg1blaeqrTW + TtPkF7GvsbsWIh0RgG9DYRtXXofad3bn6kbDrfFXKZzv4JH ERmJSyLXzMLoiwJB16V8Vz / kHT7AK94ZpLPjedPr2O4U2DGQXu1TwP5nkfgQxTeP K / XnDVHNsMKqTnc + YNX6mj / UyLnbs8eq / a9uHOBJR30e0OPAdlc2fTbBT2Cui29E ctcNH4LrcH4au9vO + RpEUm1hqZy3mHrx1p8Six6 + qJSERNYIWTID8gklyp8MSyG5 q7dk0WcyvytM1dmVf / q + KriljaZ8x2zLhQRz9vpgnfwJ6Qh3cLVoPItVdQ03WpKW WAB1NCMMyNcszkLZ9OO3IRz8iyWV / KWGI07ngVuGa7dHuTje6ZjcObBCr2e4uuU + CLENcretUAv0BtCsOBhQLXZ0qzqrgsVebTRQzm2zTM0yfBpcTtPd3MOMFeMQTHJJ 8 QH6twAKeJfY1lUCTXJYy1ZcrKnrNehksST8tk98Km9t5M2X59QZk7mJzzsUbnWr t + izid7xF7FAgDYj9XJgQHz04a4RjRSw5 / 6 dgexAgvGoeOkG7uUhYd5DEYQCyQyR Zy69pJN32L0nM2dC2e3NFU5BOBwocoKza3hdtSqqvIkj2kzyeU38uaJUco / Vk3OU s + sQNZbk5C1pxkLLwzu815tKg77Om4Nwbi + bgDvI ----- END CERTIFICATE ----- ' BANK_ID_KEY = ' ----- BEGIN PRIVATE KEY ----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC + C / BERzUouyaY fYI + GoeyHqJOZWR2WzcltQIiSdTn3g9ZWwM8UonbU7ujXwvN88Qoy6tPdZR2ORu3 aTQ7dazeWPo0L67XC3PJ1KYKi3xFJ2xis2Wh5Tve44eqajvJ4 / 5 mpU61iO9Ba + kj t0sW7IMbsCV5UVAEMSNJj7w9YDnfrspgPhKnWEt / YowtniAh0n + 21 ML5rHMvEwMh HE + BmJnI2otb2yI5YXppgL / jSiYkqQ / s6r7hxiMwZu9fxXenEwF6pB5Kk5SbMRdp unqIygn3JubgL0k14VWxjNeecJqcy7JM5ENHcei20TbQPgQ3tTLAAL / GhNhUNI99 QC4GXj2NAgMBAAECggEBAKiJH9b9Kxhm9 / BNhZ4bmvEMF7XcVv5bIAnRfwX3YdcK Z6Q / gRwSumyF0iYsmORY5EGldNOvmyxIstqxcn + 0 eMxqLeDv1Gaioll / uowpbNhL AOR64Yt0Jecg8mPfeAwvo6FVwfpdaIgk8YkZ + H5o2lBIosL2qDY / eWK4FCB94HUL Hq7za / 7 J7t5WOYjiOLmb48Fpe7cA1C6ezU / MEwVmDBwZARccCyeQFp96tdzUxb7N ifSaDpUFyxHbb / GNy + hF2ApqFrJ69OBUsHqtYdd36lD / tPF0Lexsvtj / l21D / Nh6 80 mEnpegpJBzO9z7wJkhz / 5 etO3bnaVSUyGGgJl8KkUCgYEA5SnGKyWg3dDtNeEi 5 qilYsTOERvulUJ49zzzva0ioD8sJHNlG1q7Dp9sb9rZW6VOL1W8FUZH63 / 2 sgte NE9njByK2fz9PXXUODu6yREAfDxcv9qkGTLWwZ0LFEQg68G + J1hIz6PQEuhAJqk8 rYHXnTQ0qUw7R6gez2KoXp8wnFMCgYEA1E13E5NKs / VKctUQqXcKpy7VL017yBH8 J2RTjDLVGh6BFcR9wGm5ipE659TpNKdqPN17bGPGj5MOdZL1 + sGVTRkg4vSZeZuE kpw192KgwNoDznjeVH5qY7VM8Zy2DI91mg2NQTQiMF0mRLaenMOfzFBjHwQZ2J / J ecT3Vwepgp8CgYAsocIyzRVTnklU4RBHFDmBzwrDUklZUKT2oixmmL3Rr / wM7VyX w0gDRRF9h4Ylz0A2 / 9 + t1Q5U04tcidJDJePo6fYxFpDL05MNkLSETIdnqun1g8PK FJi3BLsPq2UuBYHfb9Zeem0gAZPc88EZmdxAhdZr0qkI / 7 lgcrqQEzkIeQKBgGri kVfOqSaPEStdL + VR5JAlGPmWtgIVY / DlJtcH5Jgg0XaHFZSg5ePomFKNs9dpjigU jgYU + avhKr9w / NyBR8yoIRGCeh5qeMVjVhw1kJ9nY9E4sx6xApkudw2Ri2opc9ja h8pTF / 9 ndlPT6WkdaD9yHWVJKEYStFnVG326gtIbAoGAetLNOSZBSW03SJlI7dhY 4 hycNElfSd0t89Bf4YcYbWrpySeKCG0oTO7Y56ZS9RmgNEyz4HNXZcQ56inMNY6Z M + o1wGEKJKLBtCJHZp7Sh8zy / RMI3naF4vc4r4BpK9k5ZAEL8gHVm9M5C2ZG8whc r + Uu / g0P3m8w7INgsjxQy / U = ----- END PRIVATE KEY ----- ' Test account \ud83d\udcbc \u2693 Here is a guide: Get BankID for test Issue personal code \u2693 Tip Use this method when you set up your environment for the first time. Otherwise, use this methods mobile or desktop . Goto https://demo.bankid.com/ordercode Fill form with your data (organization, email, project, fist name, last name) Organization email Email should be a corporate, emails with @gmail . com domain wouldn't work\u2757 Goto your corporate email, you'll obtain a test 30-days trial code. Login with personal code \u2693 Use this code to log in https://demo.bankid.com/logincode It's all, now you'll be able to set up Mobile / Desktop BankID environments. Login with mobile app \u2693 This is method to log in to test account using mobile app and QR code. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Open your BankID test app and scan QR code. Warning Mobile app should be configured, read here Mobile test environments . Login with desktop app \u2693 This is method to log in to test account using desktop app. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Click \"Alternative: Start BankID Security Application on this device.\". Warning Mobile app should be configured, read here Mobile test environments . Mobile test environments \u2693 Test Android app \ud83d\udcf1 \u2693 Here is a guide: BankID test configuration Install BankID app from your app store. Enable \"airplane mode\". Open BankID app (you'll be notified that is no connection, click \"OK\"). 3.1 Click \"\u2699 Settings\". 3.2 Click \"About BankID\". 3.3 Make a \"long press\" on the heading Error information in the input dialog enter kundtest and save. Note If everything is \"OK\", it appears CUST after the Version. Exit app, and also close it from background. Disable \"airplane mode\". Done. Test iOS app \ud83d\udcf1 \u2693 Uninstall any existing version of BankID Security App and then reinstall it from App Store. In Settings \u2192 BankID \u2192 Developer \u2192 Server, enter cavainternal.test.bankid.com . Done, BankID Security App will connect to the test server . Note Please note that the app must be uninstalled/reinstalled to be restored for the production environment. TODO Screenshots If you have an iPhone you can help to document it with screenshots (Contributors welcome). Desktop test environments \u2693 Test Windows app \ud83d\udda5 \u2693 Download windows BankID desktop application ( extra link ) Install it. Run & close application. Go to this path: C:\\Users\\ USER_NAME \\AppData\\Roaming\\BankID\\Config where USER_NAME - your Window's user. Create file with name CavaServerSelector.txt Write kundtest inside file and save it. Open application, navigate to: \"File\" \u2192 \"Preferences\" \u2192 \"Info for support\" \u2192 \"Check connections\" \u2192 click \"Check\". You should get: BankID server: OK Update server: OK Done. Test MacOS app \ud83d\udcbb \u2693 TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome). Generate personal number (customizable) \u2693 Goto Personal number generator Select \"Output format\" as \"YYYYMMDDNNNN\". Select your gender. Fill out \"Date of birth\". Example Generate random personal number with (fejk.se) \u2693 Generate personal number at: https://fejk.se/ Get date of birth (without dashes). Get latest 4 digits of personnummer. Concatenate it without dashes. Example 1) Date of birth 1996 - 10 - 21 \u2192 19961021 (remove dashes) 2) End of personal number -1238 \u2192 1238 (removed dash) 3) Result 19961021 + 1238 \u2192 199610211238 (must be 12 digits length) Issue BankID for test \u2693 Login to Demo Bank. Tip First time login: personal code . Subsequent time login: mobile , desktop . Click selected button under \"Issue BankID for Test\". Tip \" Mobile BankID \" - for mobile \ud83d\udcf1; \" BankID on file \" - for desktop \ud83d\udda5; Fill data into fields (first name, last name, personal number). Tip You can use random first name and last name. Click \"Issue\" and proceed with connection section, depends on your choice (mobile or desktop). Connect with Android \ud83d\udcf1 \u2693 Before start: requirements Click \"Issue\" under \"Mobile BankID\" form. It will open modal window with QR code. Open BankID app. Click \"New BankID\". It will open scanner, scan QR code inside modal window. Success screen at mobile: Success screen at modal: You can enable fingerprint to easy approve BankID confirmation. You can check new test BankID connection inside your \"Settings\" under the BankID tab. Note P.S. Also your main screen now will have \"QR code\" button instead of \"New BankID\" Connect with iOS \ud83d\udcf1 \u2693 Warning If you have an iPhone you can help to document it with screenshots (Contributors welcome). Connect with Windows \ud83d\udda5 \u2693 Before start: requirements Click \"Issue\" under \"BankID on file\" form. Click \"Open BankID issuing\". It will open modal window with QR code. Click \"I have the most recent BankID application, proceed without installation >\" Click \"Continue >\". Click \"Start\" inside Start the program modal. You will be prompted to set password. It should be secure enough. Close the modal or click \"Close\" button. Inside BankID Secure Application you'll get new record about BankID connection. Done. Now you can test login with BankID at Windows Desktop. Connect with MacOS \ud83d\udcbb \u2693 TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome).","title":"Setup BankID \ud83d\udd27"},{"location":"uk/setup/#setup-bankid","text":"","title":"Setup BankID \ud83d\udd27"},{"location":"uk/setup/#prepare-test-environment","text":"","title":"Prepare test environment"},{"location":"uk/setup/#test-certificates","text":"Goto https://www.bankid.com/en/utvecklare/test Click \"Download \u2b07\" You'll get .p12 file To parse key.pem from it, use this command: openssl pkcs12 -in <FILE>.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:<PASSWORD>' Where -in must be a filename and path to .p12 file, password -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out key.pem -nocerts -nodes -legacy -passin 'pass:qwerty123' This command will produce key.pem file Tip Usually test password for BankID .p12 file is: qwerty123 To parse cert.pem from it, use this command: openssl pkcs12 -in <FILE>>.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:<PASSWORD>' Example openssl pkcs12 -in FPTestcert4_20220818.p12 -out cert.pem -clcerts -nokeys -legacy -passin 'pass:qwerty123' This command will produce cert.pem file Copy inner certificate and key data to your environment variables or .env file, for example: Example of .env file BANK_ID_HOST = https : // appapi2 . test . bankid . com / rp / v5 . 1 BANK_ID_CERTIFICATE = ' ----- BEGIN CERTIFICATE ----- MIIEyjCCArKgAwIBAgIIMLbIMaRHjMMwDQYJKoZIhvcNAQELBQAwcTELMAkGA1UE BhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRUwEwYDVQQFEwwx MTExMTExMTExMTExLDAqBgNVBAMMI1Rlc3RiYW5rIEEgUlAgQ0EgdjEgZm9yIEJh bmtJRCBUZXN0MB4XDTIyMDgxNzIyMDAwMFoXDTI0MDgxODIxNTk1OVowcjELMAkG A1UEBhMCU0UxHTAbBgNVBAoMFFRlc3RiYW5rIEEgQUIgKHB1YmwpMRMwEQYDVQQF Ewo1NTY2MzA0OTI4MRcwFQYDVQQpDA5UZXN0IGF2IEJhbmtJRDEWMBQGA1UEAwwN RlAgVGVzdGNlcnQgNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL4L 8 ERHNSi7Jph9gj4ah7Ieok5lZHZbNyW1AiJJ1OfeD1lbAzxSidtTu6NfC83zxCjL q091lHY5G7dpNDt1rN5Y + jQvrtcLc8nUpgqLfEUnbGKzZaHlO97jh6pqO8nj / mal TrWI70Fr6SO3SxbsgxuwJXlRUAQxI0mPvD1gOd + uymA + EqdYS39ijC2eICHSf7bU wvmscy8TAyEcT4GYmcjai1vbIjlhemmAv + NKJiSpD + zqvuHGIzBm71 / Fd6cTAXqk HkqTlJsxF2m6eojKCfcm5uAvSTXhVbGM155wmpzLskzkQ0dx6LbRNtA + BDe1MsAA v8aE2FQ0j31ALgZePY0CAwEAAaNlMGMwEQYDVR0gBAowCDAGBgQqAwQFMA4GA1Ud DwEB / wQEAwIHgDAfBgNVHSMEGDAWgBTiuVUIvGKgRjldgAxQSpIBy0zvizAdBgNV HQ4EFgQUoiM2SwR2MdMVjaZz04J9LbOEau8wDQYJKoZIhvcNAQELBQADggIBAGBA X1IC7mg1blaeqrTW + TtPkF7GvsbsWIh0RgG9DYRtXXofad3bn6kbDrfFXKZzv4JH ERmJSyLXzMLoiwJB16V8Vz / kHT7AK94ZpLPjedPr2O4U2DGQXu1TwP5nkfgQxTeP K / XnDVHNsMKqTnc + YNX6mj / UyLnbs8eq / a9uHOBJR30e0OPAdlc2fTbBT2Cui29E ctcNH4LrcH4au9vO + RpEUm1hqZy3mHrx1p8Six6 + qJSERNYIWTID8gklyp8MSyG5 q7dk0WcyvytM1dmVf / q + KriljaZ8x2zLhQRz9vpgnfwJ6Qh3cLVoPItVdQ03WpKW WAB1NCMMyNcszkLZ9OO3IRz8iyWV / KWGI07ngVuGa7dHuTje6ZjcObBCr2e4uuU + CLENcretUAv0BtCsOBhQLXZ0qzqrgsVebTRQzm2zTM0yfBpcTtPd3MOMFeMQTHJJ 8 QH6twAKeJfY1lUCTXJYy1ZcrKnrNehksST8tk98Km9t5M2X59QZk7mJzzsUbnWr t + izid7xF7FAgDYj9XJgQHz04a4RjRSw5 / 6 dgexAgvGoeOkG7uUhYd5DEYQCyQyR Zy69pJN32L0nM2dC2e3NFU5BOBwocoKza3hdtSqqvIkj2kzyeU38uaJUco / Vk3OU s + sQNZbk5C1pxkLLwzu815tKg77Om4Nwbi + bgDvI ----- END CERTIFICATE ----- ' BANK_ID_KEY = ' ----- BEGIN PRIVATE KEY ----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC + C / BERzUouyaY fYI + GoeyHqJOZWR2WzcltQIiSdTn3g9ZWwM8UonbU7ujXwvN88Qoy6tPdZR2ORu3 aTQ7dazeWPo0L67XC3PJ1KYKi3xFJ2xis2Wh5Tve44eqajvJ4 / 5 mpU61iO9Ba + kj t0sW7IMbsCV5UVAEMSNJj7w9YDnfrspgPhKnWEt / YowtniAh0n + 21 ML5rHMvEwMh HE + BmJnI2otb2yI5YXppgL / jSiYkqQ / s6r7hxiMwZu9fxXenEwF6pB5Kk5SbMRdp unqIygn3JubgL0k14VWxjNeecJqcy7JM5ENHcei20TbQPgQ3tTLAAL / GhNhUNI99 QC4GXj2NAgMBAAECggEBAKiJH9b9Kxhm9 / BNhZ4bmvEMF7XcVv5bIAnRfwX3YdcK Z6Q / gRwSumyF0iYsmORY5EGldNOvmyxIstqxcn + 0 eMxqLeDv1Gaioll / uowpbNhL AOR64Yt0Jecg8mPfeAwvo6FVwfpdaIgk8YkZ + H5o2lBIosL2qDY / eWK4FCB94HUL Hq7za / 7 J7t5WOYjiOLmb48Fpe7cA1C6ezU / MEwVmDBwZARccCyeQFp96tdzUxb7N ifSaDpUFyxHbb / GNy + hF2ApqFrJ69OBUsHqtYdd36lD / tPF0Lexsvtj / l21D / Nh6 80 mEnpegpJBzO9z7wJkhz / 5 etO3bnaVSUyGGgJl8KkUCgYEA5SnGKyWg3dDtNeEi 5 qilYsTOERvulUJ49zzzva0ioD8sJHNlG1q7Dp9sb9rZW6VOL1W8FUZH63 / 2 sgte NE9njByK2fz9PXXUODu6yREAfDxcv9qkGTLWwZ0LFEQg68G + J1hIz6PQEuhAJqk8 rYHXnTQ0qUw7R6gez2KoXp8wnFMCgYEA1E13E5NKs / VKctUQqXcKpy7VL017yBH8 J2RTjDLVGh6BFcR9wGm5ipE659TpNKdqPN17bGPGj5MOdZL1 + sGVTRkg4vSZeZuE kpw192KgwNoDznjeVH5qY7VM8Zy2DI91mg2NQTQiMF0mRLaenMOfzFBjHwQZ2J / J ecT3Vwepgp8CgYAsocIyzRVTnklU4RBHFDmBzwrDUklZUKT2oixmmL3Rr / wM7VyX w0gDRRF9h4Ylz0A2 / 9 + t1Q5U04tcidJDJePo6fYxFpDL05MNkLSETIdnqun1g8PK FJi3BLsPq2UuBYHfb9Zeem0gAZPc88EZmdxAhdZr0qkI / 7 lgcrqQEzkIeQKBgGri kVfOqSaPEStdL + VR5JAlGPmWtgIVY / DlJtcH5Jgg0XaHFZSg5ePomFKNs9dpjigU jgYU + avhKr9w / NyBR8yoIRGCeh5qeMVjVhw1kJ9nY9E4sx6xApkudw2Ri2opc9ja h8pTF / 9 ndlPT6WkdaD9yHWVJKEYStFnVG326gtIbAoGAetLNOSZBSW03SJlI7dhY 4 hycNElfSd0t89Bf4YcYbWrpySeKCG0oTO7Y56ZS9RmgNEyz4HNXZcQ56inMNY6Z M + o1wGEKJKLBtCJHZp7Sh8zy / RMI3naF4vc4r4BpK9k5ZAEL8gHVm9M5C2ZG8whc r + Uu / g0P3m8w7INgsjxQy / U = ----- END PRIVATE KEY ----- '","title":"Test certificates \ud83e\uddfe"},{"location":"uk/setup/#test-account","text":"Here is a guide: Get BankID for test","title":"Test account \ud83d\udcbc"},{"location":"uk/setup/#issue-personal-code","text":"Tip Use this method when you set up your environment for the first time. Otherwise, use this methods mobile or desktop . Goto https://demo.bankid.com/ordercode Fill form with your data (organization, email, project, fist name, last name) Organization email Email should be a corporate, emails with @gmail . com domain wouldn't work\u2757 Goto your corporate email, you'll obtain a test 30-days trial code.","title":"Issue personal code"},{"location":"uk/setup/#login-with-personal-code","text":"Use this code to log in https://demo.bankid.com/logincode It's all, now you'll be able to set up Mobile / Desktop BankID environments.","title":"Login with personal code"},{"location":"uk/setup/#login-with-mobile-app","text":"This is method to log in to test account using mobile app and QR code. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Open your BankID test app and scan QR code. Warning Mobile app should be configured, read here Mobile test environments .","title":"Login with mobile app"},{"location":"uk/setup/#login-with-desktop-app","text":"This is method to log in to test account using desktop app. Tip Use this method when you already set up your test account via personal code Issue personal code . Go to https://demo.bankid.com/logintest Click \"Alternative: Start BankID Security Application on this device.\". Warning Mobile app should be configured, read here Mobile test environments .","title":"Login with desktop app"},{"location":"uk/setup/#mobile-test-environments","text":"","title":"Mobile test environments"},{"location":"uk/setup/#test-android-app","text":"Here is a guide: BankID test configuration Install BankID app from your app store. Enable \"airplane mode\". Open BankID app (you'll be notified that is no connection, click \"OK\"). 3.1 Click \"\u2699 Settings\". 3.2 Click \"About BankID\". 3.3 Make a \"long press\" on the heading Error information in the input dialog enter kundtest and save. Note If everything is \"OK\", it appears CUST after the Version. Exit app, and also close it from background. Disable \"airplane mode\". Done.","title":"Test Android app \ud83d\udcf1"},{"location":"uk/setup/#test-ios-app","text":"Uninstall any existing version of BankID Security App and then reinstall it from App Store. In Settings \u2192 BankID \u2192 Developer \u2192 Server, enter cavainternal.test.bankid.com . Done, BankID Security App will connect to the test server . Note Please note that the app must be uninstalled/reinstalled to be restored for the production environment. TODO Screenshots If you have an iPhone you can help to document it with screenshots (Contributors welcome).","title":"Test iOS app \ud83d\udcf1"},{"location":"uk/setup/#desktop-test-environments","text":"","title":"Desktop test environments"},{"location":"uk/setup/#test-windows-app","text":"Download windows BankID desktop application ( extra link ) Install it. Run & close application. Go to this path: C:\\Users\\ USER_NAME \\AppData\\Roaming\\BankID\\Config where USER_NAME - your Window's user. Create file with name CavaServerSelector.txt Write kundtest inside file and save it. Open application, navigate to: \"File\" \u2192 \"Preferences\" \u2192 \"Info for support\" \u2192 \"Check connections\" \u2192 click \"Check\". You should get: BankID server: OK Update server: OK Done.","title":"Test Windows app \ud83d\udda5"},{"location":"uk/setup/#test-macos-app","text":"TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome).","title":"Test MacOS app \ud83d\udcbb"},{"location":"uk/setup/#generate-personal-number-customizable","text":"Goto Personal number generator Select \"Output format\" as \"YYYYMMDDNNNN\". Select your gender. Fill out \"Date of birth\". Example","title":"Generate personal number (customizable)"},{"location":"uk/setup/#generate-random-personal-number-with-fejkse","text":"Generate personal number at: https://fejk.se/ Get date of birth (without dashes). Get latest 4 digits of personnummer. Concatenate it without dashes. Example 1) Date of birth 1996 - 10 - 21 \u2192 19961021 (remove dashes) 2) End of personal number -1238 \u2192 1238 (removed dash) 3) Result 19961021 + 1238 \u2192 199610211238 (must be 12 digits length)","title":"Generate random personal number with (fejk.se)"},{"location":"uk/setup/#issue-bankid-for-test","text":"Login to Demo Bank. Tip First time login: personal code . Subsequent time login: mobile , desktop . Click selected button under \"Issue BankID for Test\". Tip \" Mobile BankID \" - for mobile \ud83d\udcf1; \" BankID on file \" - for desktop \ud83d\udda5; Fill data into fields (first name, last name, personal number). Tip You can use random first name and last name. Click \"Issue\" and proceed with connection section, depends on your choice (mobile or desktop).","title":"Issue BankID for test"},{"location":"uk/setup/#connect-with-android","text":"Before start: requirements Click \"Issue\" under \"Mobile BankID\" form. It will open modal window with QR code. Open BankID app. Click \"New BankID\". It will open scanner, scan QR code inside modal window. Success screen at mobile: Success screen at modal: You can enable fingerprint to easy approve BankID confirmation. You can check new test BankID connection inside your \"Settings\" under the BankID tab. Note P.S. Also your main screen now will have \"QR code\" button instead of \"New BankID\"","title":"Connect with Android \ud83d\udcf1"},{"location":"uk/setup/#connect-with-ios","text":"Warning If you have an iPhone you can help to document it with screenshots (Contributors welcome).","title":"Connect with iOS \ud83d\udcf1"},{"location":"uk/setup/#connect-with-windows","text":"Before start: requirements Click \"Issue\" under \"BankID on file\" form. Click \"Open BankID issuing\". It will open modal window with QR code. Click \"I have the most recent BankID application, proceed without installation >\" Click \"Continue >\". Click \"Start\" inside Start the program modal. You will be prompted to set password. It should be secure enough. Close the modal or click \"Close\" button. Inside BankID Secure Application you'll get new record about BankID connection. Done. Now you can test login with BankID at Windows Desktop.","title":"Connect with Windows \ud83d\udda5"},{"location":"uk/setup/#connect-with-macos","text":"TODO If you have a Macbook, you can help to document it with screenshots (Contributors welcome).","title":"Connect with MacOS \ud83d\udcbb"},{"location":"uk/usage/","text":"Usage \ud83d\udd0c \u2693 Settings Management \u2693 With Pydantic \u2693 Pydantic provides a convenient interface for managing settings and reading them from environment variables or .env . Pydantic settings management: Documentation Here is an example how you can manage your BankID environments: settings.py import functools from pydantic import BaseSettings , Field __all__ = [ \"BankIDSettings\" ] class _BankIDSettings ( BaseSettings ): BANK_ID_CERTIFICATE : str BANK_ID_HOST : str = Field ( default = \"https://appapi2.test.bankid.com/rp/v5.1\" ) BANK_ID_KEY : str class Config : env_file = \".env\" env_file_encoding = \"UTF-8\" @functools . lru_cache () def get_bank_id_settings () -> _BankIDSettings : return _BankIDSettings () BankIDSettings : _BankIDSettings = get_bank_id_settings () With Dynaconf \u2693 Another good option to manage your settings and environments. https://www.dynaconf.com/ BankID Factory \ud83c\udfe6\ud83c\udfed \u2693 To initialize BankID you should use BankIDFactory class and then use make_client method to retrieve necessary client. from settings import BankIDSettings from bankid_asyncio import BankIDFactory bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) Clients \u2693 Key differences \u2693 With Pydantic \u2693 Clients with Pydantic require schema kwarg only attribute to all methods. It also returns BaseModel based results from all methods (all Pydantic features included). It helps to easily transform results to complex structures written by schemas, that you can access with . dot notation, like class attributes, transform to dict with aliases and python snake case attribute names. Asynchronous \u2693 Clients with asyncio support, based on httpx.AsyncClient . Synchronous \u2693 Clients, that based on httpx.Client . Async with Pydantic (preferable) \u2693 Why this one preferable? Because clients with Pydantic have extra validations (realization via BaseModel schema classes). It should prevent errors at develop & testing stages. To use asynchronous BankID client with Pydantic use asynchronous = True together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDAsyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncPydanticClient = bank_id_factory . make_client ( asynchronous = True , pydantic = True ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response : AuthResponseSchema = await bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) TODO Make demo (example purposes) repository with FastAPI based back-end using this client. Warning async methods (coroutines) should be run from async code. Async without Pydantic \u2693 To use asynchronous BankID client without Pydantic use asynchronous = True together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDAsyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncClient = bank_id_factory . make_client ( asynchronous = True , pydantic = False ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response = await bank_id_client . auth ( user_ip = \"127.0.0.1\" ) Warning async methods (coroutines) should be run from async code. Sync with Pydantic \u2693 To use synchronous BankID client with Pydantic use asynchronous = False together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDSyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncPydanticClient = bank_id_factory . make_client ( asynchronous = False , pydantic = True ) auth_response : AuthResponseSchema = bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) # Possible usage of responses print ( auth_response . order_ref , auth_response . auto_start_token , auth_response . qr_start_token , auth_response . qr_start_secret , ) print ( auth_response . dict (), auth_response . json ()) print ( auth_response . dict ( by_alias = True ), auth_response . json ( by_alias = True )) Example output 66d2323a-40a0-49e2-822d-f95f2fdc1c58 556080cd-aa51-4c37-82e8-f34d6dcebf4b 36d7f12b-52f5-44c4-9514-2a5d3d2b22d8 33b73952-f2dd-4c99-a727-c7ae77bdc834 { 'order_ref' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'auto_start_token' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qr_start_token' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qr_start_secret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"order_ref\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"auto_start_token\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qr_start_token\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qr_start_secret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" } { 'orderRef' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'autoStartToken' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qrStartToken' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qrStartSecret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"orderRef\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"autoStartToken\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qrStartToken\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qrStartSecret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" } Sync without Pydantic \u2693 To use synchronous BankID client without Pydantic use asynchronous = False together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDSyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncClient = bank_id_factory . make_client ( asynchronous = False , pydantic = False ) auth_response = bank_id_client . auth ( user_ip = \"127.0.0.1\" ) # Results from clients is simple python's dict print ( auth_response ) Example output { 'orderRef' : 'f7508caf-5e3c-40ed-b8a0-b47e3b82819f' , 'autoStartToken' : '45dd8454-9b43-4b3d-bbe8-ced64056d415' , 'qrStartToken' : '19f814b1-a198-4328-be1f-83a02f46890a' , 'qrStartSecret' : '663fee80-0a25-40a3-8d1b-a5c4046c01f1' }","title":"Usage \ud83d\udd0c"},{"location":"uk/usage/#usage","text":"","title":"Usage \ud83d\udd0c"},{"location":"uk/usage/#settings-management","text":"","title":"Settings Management"},{"location":"uk/usage/#with-pydantic","text":"Pydantic provides a convenient interface for managing settings and reading them from environment variables or .env . Pydantic settings management: Documentation Here is an example how you can manage your BankID environments: settings.py import functools from pydantic import BaseSettings , Field __all__ = [ \"BankIDSettings\" ] class _BankIDSettings ( BaseSettings ): BANK_ID_CERTIFICATE : str BANK_ID_HOST : str = Field ( default = \"https://appapi2.test.bankid.com/rp/v5.1\" ) BANK_ID_KEY : str class Config : env_file = \".env\" env_file_encoding = \"UTF-8\" @functools . lru_cache () def get_bank_id_settings () -> _BankIDSettings : return _BankIDSettings () BankIDSettings : _BankIDSettings = get_bank_id_settings ()","title":"With Pydantic"},{"location":"uk/usage/#with-dynaconf","text":"Another good option to manage your settings and environments. https://www.dynaconf.com/","title":"With Dynaconf"},{"location":"uk/usage/#bankid-factory","text":"To initialize BankID you should use BankIDFactory class and then use make_client method to retrieve necessary client. from settings import BankIDSettings from bankid_asyncio import BankIDFactory bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , )","title":"BankID Factory \ud83c\udfe6\ud83c\udfed"},{"location":"uk/usage/#clients","text":"","title":"Clients"},{"location":"uk/usage/#key-differences","text":"","title":"Key differences"},{"location":"uk/usage/#with-pydantic_1","text":"Clients with Pydantic require schema kwarg only attribute to all methods. It also returns BaseModel based results from all methods (all Pydantic features included). It helps to easily transform results to complex structures written by schemas, that you can access with . dot notation, like class attributes, transform to dict with aliases and python snake case attribute names.","title":"With Pydantic"},{"location":"uk/usage/#asynchronous","text":"Clients with asyncio support, based on httpx.AsyncClient .","title":"Asynchronous"},{"location":"uk/usage/#synchronous","text":"Clients, that based on httpx.Client .","title":"Synchronous"},{"location":"uk/usage/#async-with-pydantic-preferable","text":"Why this one preferable? Because clients with Pydantic have extra validations (realization via BaseModel schema classes). It should prevent errors at develop & testing stages. To use asynchronous BankID client with Pydantic use asynchronous = True together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDAsyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncPydanticClient = bank_id_factory . make_client ( asynchronous = True , pydantic = True ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response : AuthResponseSchema = await bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) TODO Make demo (example purposes) repository with FastAPI based back-end using this client. Warning async methods (coroutines) should be run from async code.","title":"Async with Pydantic (preferable)"},{"location":"uk/usage/#async-without-pydantic","text":"To use asynchronous BankID client without Pydantic use asynchronous = True together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDAsyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDAsyncClient = bank_id_factory . make_client ( asynchronous = True , pydantic = False ) # === Async code === # Then you'll be able to use BankID client coroutines inside async code. auth_response = await bank_id_client . auth ( user_ip = \"127.0.0.1\" ) Warning async methods (coroutines) should be run from async code.","title":"Async without Pydantic"},{"location":"uk/usage/#sync-with-pydantic","text":"To use synchronous BankID client with Pydantic use asynchronous = False together with pydantic = True inside make_client method. from bankid_asyncio import ( BankIDFactory , BankIDSyncPydanticClient , AuthRequestSchema , AuthResponseSchema , ) from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncPydanticClient = bank_id_factory . make_client ( asynchronous = False , pydantic = True ) auth_response : AuthResponseSchema = bank_id_client . auth ( schema = AuthRequestSchema ( user_ip = \"127.0.0.1\" ) ) # Possible usage of responses print ( auth_response . order_ref , auth_response . auto_start_token , auth_response . qr_start_token , auth_response . qr_start_secret , ) print ( auth_response . dict (), auth_response . json ()) print ( auth_response . dict ( by_alias = True ), auth_response . json ( by_alias = True )) Example output 66d2323a-40a0-49e2-822d-f95f2fdc1c58 556080cd-aa51-4c37-82e8-f34d6dcebf4b 36d7f12b-52f5-44c4-9514-2a5d3d2b22d8 33b73952-f2dd-4c99-a727-c7ae77bdc834 { 'order_ref' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'auto_start_token' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qr_start_token' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qr_start_secret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"order_ref\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"auto_start_token\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qr_start_token\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qr_start_secret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" } { 'orderRef' : '66d2323a-40a0-49e2-822d-f95f2fdc1c58' , 'autoStartToken' : '556080cd-aa51-4c37-82e8-f34d6dcebf4b' , 'qrStartToken' : '36d7f12b-52f5-44c4-9514-2a5d3d2b22d8' , 'qrStartSecret' : '33b73952-f2dd-4c99-a727-c7ae77bdc834' } { \"orderRef\" : \"66d2323a-40a0-49e2-822d-f95f2fdc1c58\" , \"autoStartToken\" : \"556080cd-aa51-4c37-82e8-f34d6dcebf4b\" , \"qrStartToken\" : \"36d7f12b-52f5-44c4-9514-2a5d3d2b22d8\" , \"qrStartSecret\" : \"33b73952-f2dd-4c99-a727-c7ae77bdc834\" }","title":"Sync with Pydantic"},{"location":"uk/usage/#sync-without-pydantic","text":"To use synchronous BankID client without Pydantic use asynchronous = False together with pydantic = False inside make_client method. from bankid_asyncio import BankIDFactory , BankIDSyncClient from settings import BankIDSettings bank_id_factory = BankIDFactory ( host = BankIDSettings . BANK_ID_HOST , certificate = BankIDSettings . BANK_ID_CERTIFICATE , key = BankIDSettings . BANK_ID_KEY , ) bank_id_client : BankIDSyncClient = bank_id_factory . make_client ( asynchronous = False , pydantic = False ) auth_response = bank_id_client . auth ( user_ip = \"127.0.0.1\" ) # Results from clients is simple python's dict print ( auth_response ) Example output { 'orderRef' : 'f7508caf-5e3c-40ed-b8a0-b47e3b82819f' , 'autoStartToken' : '45dd8454-9b43-4b3d-bbe8-ced64056d415' , 'qrStartToken' : '19f814b1-a198-4328-be1f-83a02f46890a' , 'qrStartSecret' : '663fee80-0a25-40a3-8d1b-a5c4046c01f1' }","title":"Sync without Pydantic"},{"location":"uk/common/abbreviations/","text":"","title":"Abbreviations"},{"location":"uk/includes/badges/","text":"Badges \ud83c\udff7\ufe0f \u2693","title":"Badges"},{"location":"uk/includes/badges/#badges","text":"","title":"Badges \ud83c\udff7\ufe0f"}]}